#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 23, 2020 07:51:02 PM PST  platform: Windows NT
# Author: Jingtian Zhang

import warnings
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import one_page_all_support
from tkinter import filedialog as tkFileDialog
from tkinter.filedialog import askopenfile
from tkinter.filedialog import askopenfilename
from tkinter import messagebox
from tkinter import Entry, IntVar, Tk, StringVar, BooleanVar

# import sompy / tfprop_sompy related packages
import math
import glob
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import urllib
import random
import matplotlib as mpl
from sompy.sompy import SOMFactory
from sompy.visualization.plot_tools import plot_hex_map
import logging
import pickle
import os

import sklearn
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit
from sklearn import cluster
# from sklearn.externals import joblib
import joblib

# cluster inspector
import importlib
import logging
from tfprop_sompy import tfprop_config
from tfprop_sompy import tfprop_vis
from tfprop_sompy import tfprop_config as tfpinit
from tfprop_sompy import cluster_inspector as ci
importlib.reload(ci)

warnings.filterwarnings('ignore')

logging.getLogger('matplotlib.font_manager').disabled = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    one_page_all_support.set_Tk_var()
    top = Toplevel1(root)
    one_page_all_support.init(root, top)
    root.mainloop()


w = None
dir_name = os.path.dirname(os.path.realpath(__file__))


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    one_page_all_support.set_Tk_var()
    top = Toplevel1(w)
    one_page_all_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None, initialdir='', filetypes=()):
        
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = "-family Arial -size 10 -weight bold -slant roman "  \
        "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[
                       ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1920x986+-9+-11")
        top.minsize(176, 1)
        top.maxsize(1924, 1050)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.v = StringVar()
        self.n = IntVar()
        self.b = BooleanVar()

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Title = tk.Label(self.Frame1)
        self.Title.place(relx=0.219, rely=0.122, height=51, width=195)
        self.Title.configure(activebackground="#f9f9f9")
        self.Title.configure(activeforeground="black")
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(disabledforeground="#a3a3a3")
        self.Title.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.Title.configure(foreground="#000000")
        self.Title.configure(highlightbackground="#d9d9d9")
        self.Title.configure(highlightcolor="black")
        self.Title.configure(text='''SOM Trainer''')

        # label for introduction
        self.Intro = tk.Label(self.Frame1)
        self.Intro.place(relx=0.042, rely=0.233, height=31, width=300)
        self.Intro.configure(anchor='w')
        self.Intro.configure(activeforeground="#000000")
        self.Intro.configure(background="#d9d9d9")
        self.Intro.configure(disabledforeground="#a3a3a3")
        self.Intro.configure(font=font9)
        self.Intro.configure(foreground="#000000")
        self.Intro.configure(text='''Input Hyperparameters for SOM Training''')


        # Mapsize label
        self.Mapsize = tk.Label(self.Frame1)
        self.Mapsize.place(relx=0.042, rely=0.325, height=31, width=71)
        self.Mapsize.configure(activebackground="#f9f9f9")
        self.Mapsize.configure(activeforeground="black")
        self.Mapsize.configure(anchor='w')
        self.Mapsize.configure(background="#d9d9d9")
        self.Mapsize.configure(disabledforeground="#a3a3a3")
        self.Mapsize.configure(foreground="#000000")
        self.Mapsize.configure(highlightbackground="#d9d9d9")
        self.Mapsize.configure(highlightcolor="black")
        self.Mapsize.configure(text='''Mapsize''')

        # Mapsize X
        self.Mapsize_x = tk.Entry(self.Frame1)
        self.Mapsize_x.place(relx=0.135, rely=0.325, height=26, relwidth=0.054)
        self.Mapsize_x.configure(textvariable=IntVar())
        self.Mapsize_x.configure(background="white")
        self.Mapsize_x.configure(disabledforeground="#a3a3a3")
        self.Mapsize_x.configure(font="TkFixedFont")
        self.Mapsize_x.configure(foreground="#000000")
        self.Mapsize_x.configure(highlightbackground="#d9d9d9")
        self.Mapsize_x.configure(highlightcolor="black")
        self.Mapsize_x.configure(insertbackground="black")
        self.Mapsize_x.configure(selectbackground="#c4c4c4")
        self.Mapsize_x.configure(selectforeground="black")

        # Mapsize Y
        self.Mapsize_y = tk.Entry(self.Frame1)
        self.Mapsize_y.place(relx=0.195, rely=0.325, height=26, relwidth=0.059)
        self.Mapsize_y.configure(textvariable=IntVar())
        self.Mapsize_y.configure(background="white")
        self.Mapsize_y.configure(disabledforeground="#a3a3a3")
        self.Mapsize_y.configure(font="TkFixedFont")
        self.Mapsize_y.configure(foreground="#000000")
        self.Mapsize_y.configure(highlightbackground="#d9d9d9")
        self.Mapsize_y.configure(highlightcolor="black")
        self.Mapsize_y.configure(insertbackground="black")
        self.Mapsize_y.configure(selectbackground="#c4c4c4")
        self.Mapsize_y.configure(selectforeground="black")

        self.Normalization = tk.Label(self.Frame1)
        self.Normalization.place(relx=0.042, rely=0.385, height=31, width=117)
        self.Normalization.configure(activebackground="#f9f9f9")
        self.Normalization.configure(activeforeground="black")
        self.Normalization.configure(anchor='w')
        self.Normalization.configure(background="#d9d9d9")
        self.Normalization.configure(disabledforeground="#a3a3a3")
        self.Normalization.configure(foreground="#000000")
        self.Normalization.configure(highlightbackground="#d9d9d9")
        self.Normalization.configure(highlightcolor="black")
        self.Normalization.configure(text='''Normalization''')

        self.Initialization = tk.Label(self.Frame1)
        self.Initialization.place(relx=0.042, rely=0.446, height=31, width=105)
        self.Initialization.configure(activebackground="#f9f9f9")
        self.Initialization.configure(activeforeground="black")
        self.Initialization.configure(anchor='w')
        self.Initialization.configure(background="#d9d9d9")
        self.Initialization.configure(disabledforeground="#a3a3a3")
        self.Initialization.configure(foreground="#000000")
        self.Initialization.configure(highlightbackground="#d9d9d9")
        self.Initialization.configure(highlightcolor="black")
        self.Initialization.configure(text='''Initialization''')


        self.train_ft_rin = tk.Label(self.Frame1)
        self.train_ft_rin.place(relx=0.313, rely=0.588, height=31, width=181)
        self.train_ft_rin.configure(activebackground="#f9f9f9")
        self.train_ft_rin.configure(activeforeground="black")
        self.train_ft_rin.configure(anchor='w')
        self.train_ft_rin.configure(background="#d9d9d9")
        self.train_ft_rin.configure(disabledforeground="#a3a3a3")
        self.train_ft_rin.configure(foreground="#000000")
        self.train_ft_rin.configure(highlightbackground="#d9d9d9")
        self.train_ft_rin.configure(highlightcolor="black")
        self.train_ft_rin.configure(text='''train_finetune_radiusin''')

        self.train_rg_rfin = tk.Label(self.Frame1)
        self.train_rg_rfin.place(relx=0.313, rely=0.487, height=31, width=171)
        self.train_rg_rfin.configure(activebackground="#f9f9f9")
        self.train_rg_rfin.configure(activeforeground="black")
        self.train_rg_rfin.configure(anchor='w')
        self.train_rg_rfin.configure(background="#d9d9d9")
        self.train_rg_rfin.configure(disabledforeground="#a3a3a3")
        self.train_rg_rfin.configure(foreground="#000000")
        self.train_rg_rfin.configure(highlightbackground="#d9d9d9")
        self.train_rg_rfin.configure(highlightcolor="black")
        self.train_rg_rfin.configure(text='''train_rough_radiusfin''')

        self.shared_memory = tk.Label(self.Frame1)
        self.shared_memory.place(relx=0.313, rely=0.284, height=31, width=133)
        self.shared_memory.configure(activebackground="#f9f9f9")
        self.shared_memory.configure(activeforeground="black")
        self.shared_memory.configure(anchor='w')
        self.shared_memory.configure(background="#d9d9d9")
        self.shared_memory.configure(disabledforeground="#a3a3a3")
        self.shared_memory.configure(foreground="#000000")
        self.shared_memory.configure(highlightbackground="#d9d9d9")
        self.shared_memory.configure(highlightcolor="black")
        self.shared_memory.configure(text='''shared_memory''')

        self.train_rough_len = tk.Label(self.Frame1)
        self.train_rough_len.place(
            relx=0.313, rely=0.385, height=31, width=126)
        self.train_rough_len.configure(activebackground="#f9f9f9")
        self.train_rough_len.configure(activeforeground="black")
        self.train_rough_len.configure(anchor='w')
        self.train_rough_len.configure(background="#d9d9d9")
        self.train_rough_len.configure(disabledforeground="#a3a3a3")
        self.train_rough_len.configure(foreground="#000000")
        self.train_rough_len.configure(highlightbackground="#d9d9d9")
        self.train_rough_len.configure(highlightcolor="black")
        self.train_rough_len.configure(text='''train_rough_len''')

        self.train_rough_rin = tk.Label(self.Frame1)
        self.train_rough_rin.place(
            relx=0.313, rely=0.436, height=31, width=165)
        self.train_rough_rin.configure(activebackground="#f9f9f9")
        self.train_rough_rin.configure(activeforeground="black")
        self.train_rough_rin.configure(anchor='w')
        self.train_rough_rin.configure(background="#d9d9d9")
        self.train_rough_rin.configure(disabledforeground="#a3a3a3")
        self.train_rough_rin.configure(foreground="#000000")
        self.train_rough_rin.configure(highlightbackground="#d9d9d9")
        self.train_rough_rin.configure(highlightcolor="black")
        self.train_rough_rin.configure(text='''train_rough_radiusin''')

        self.train_ft_len = tk.Label(self.Frame1)
        self.train_ft_len.place(relx=0.313, rely=0.538, height=31, width=142)
        self.train_ft_len.configure(activebackground="#f9f9f9")
        self.train_ft_len.configure(activeforeground="black")
        self.train_ft_len.configure(anchor='w')
        self.train_ft_len.configure(background="#d9d9d9")
        self.train_ft_len.configure(disabledforeground="#a3a3a3")
        self.train_ft_len.configure(foreground="#000000")
        self.train_ft_len.configure(highlightbackground="#d9d9d9")
        self.train_ft_len.configure(highlightcolor="black")
        self.train_ft_len.configure(text='''train_finetune_len''')

        # n_job label
        self.n_job = tk.Label(self.Frame1)
        self.n_job.place(relx=0.313, rely=0.233, height=31, width=49)
        self.n_job.configure(activebackground="#f9f9f9")
        self.n_job.configure(activeforeground="black")
        self.n_job.configure(anchor='w')
        self.n_job.configure(background="#d9d9d9")
        self.n_job.configure(disabledforeground="#a3a3a3")
        self.n_job.configure(foreground="#000000")
        self.n_job.configure(highlightbackground="#d9d9d9")
        self.n_job.configure(highlightcolor="black")
        self.n_job.configure(text='''n_job''')

        self.verbose = tk.Label(self.Frame1)
        self.verbose.place(relx=0.313, rely=0.335, height=31, width=69)
        self.verbose.configure(activebackground="#f9f9f9")
        self.verbose.configure(activeforeground="black")
        self.verbose.configure(anchor='w')
        self.verbose.configure(background="#d9d9d9")
        self.verbose.configure(disabledforeground="#a3a3a3")
        self.verbose.configure(foreground="#000000")
        self.verbose.configure(highlightbackground="#d9d9d9")
        self.verbose.configure(highlightcolor="black")
        self.verbose.configure(text='''verbose''')

        self.train_ft_rfin = tk.Label(self.Frame1)
        self.train_ft_rfin.place(relx=0.313, rely=0.639, height=31, width=187)
        self.train_ft_rfin.configure(activebackground="#f9f9f9")
        self.train_ft_rfin.configure(activeforeground="black")
        self.train_ft_rfin.configure(anchor='w')
        self.train_ft_rfin.configure(background="#d9d9d9")
        self.train_ft_rfin.configure(disabledforeground="#a3a3a3")
        self.train_ft_rfin.configure(foreground="#000000")
        self.train_ft_rfin.configure(highlightbackground="#d9d9d9")
        self.train_ft_rfin.configure(highlightcolor="black")
        self.train_ft_rfin.configure(text='''train_finetune_radiusfin''')

        self.train_len_factor = tk.Label(self.Frame1)
        self.train_len_factor.place(
            relx=0.313, rely=0.69, height=31, width=124)
        self.train_len_factor.configure(activebackground="#f9f9f9")
        self.train_len_factor.configure(activeforeground="black")
        self.train_len_factor.configure(anchor='w')
        self.train_len_factor.configure(background="#d9d9d9")
        self.train_len_factor.configure(disabledforeground="#a3a3a3")
        self.train_len_factor.configure(foreground="#000000")
        self.train_len_factor.configure(highlightbackground="#d9d9d9")
        self.train_len_factor.configure(highlightcolor="black")
        self.train_len_factor.configure(text='''train_len_factor''')

        self.n_job_ent = tk.Entry(self.Frame1)
        self.n_job_ent.place(relx=0.422, rely=0.233, height=26, relwidth=0.127)
        self.n_job_ent.configure(textvariable=IntVar())
        self.n_job_ent.configure(background="white")
        self.n_job_ent.configure(disabledforeground="#a3a3a3")
        self.n_job_ent.configure(font="TkFixedFont")
        self.n_job_ent.configure(foreground="#000000")
        self.n_job_ent.configure(highlightbackground="#d9d9d9")
        self.n_job_ent.configure(highlightcolor="black")
        self.n_job_ent.configure(insertbackground="black")
        self.n_job_ent.configure(selectbackground="#c4c4c4")
        self.n_job_ent.configure(selectforeground="black")

        self.shared_memory_ent = tk.Entry(
            self.Frame1, textvariable=self.v)
        self.shared_memory_ent.place(
            relx=0.422, rely=0.284, height=26, relwidth=0.127)
        self.shared_memory_ent.configure(background="white")
        self.shared_memory_ent.configure(disabledforeground="#a3a3a3")
        self.shared_memory_ent.configure(font="TkFixedFont")
        self.shared_memory_ent.configure(foreground="#000000")
        self.shared_memory_ent.configure(highlightbackground="#d9d9d9")
        self.shared_memory_ent.configure(highlightcolor="black")
        self.shared_memory_ent.configure(insertbackground="black")
        self.shared_memory_ent.configure(selectbackground="#c4c4c4")
        self.shared_memory_ent.configure(selectforeground="black")

        self.verbose_ent = tk.Entry(self.Frame1, textvariable=self.v)
        self.verbose_ent.place(relx=0.422, rely=0.335,
                               height=26, relwidth=0.127)
        self.verbose_ent.configure(background="white")
        self.verbose_ent.configure(disabledforeground="#a3a3a3")
        self.verbose_ent.configure(font="TkFixedFont")
        self.verbose_ent.configure(foreground="#000000")
        self.verbose_ent.configure(highlightbackground="#d9d9d9")
        self.verbose_ent.configure(highlightcolor="black")
        self.verbose_ent.configure(insertbackground="black")
        self.verbose_ent.configure(selectbackground="#c4c4c4")
        self.verbose_ent.configure(selectforeground="black")

        self.train_rough_len_ent = tk.Entry(self.Frame1)
        self.train_rough_len_ent.place(
            relx=0.422, rely=0.385, height=26, relwidth=0.127)
        self.train_rough_len_ent.configure(textvariable=IntVar())
        self.train_rough_len_ent.configure(background="white")
        self.train_rough_len_ent.configure(disabledforeground="#a3a3a3")
        self.train_rough_len_ent.configure(font="TkFixedFont")
        self.train_rough_len_ent.configure(foreground="#000000")
        self.train_rough_len_ent.configure(highlightbackground="#d9d9d9")
        self.train_rough_len_ent.configure(highlightcolor="black")
        self.train_rough_len_ent.configure(insertbackground="black")
        self.train_rough_len_ent.configure(selectbackground="#c4c4c4")
        self.train_rough_len_ent.configure(selectforeground="black")

        self.train_rough_rin_ent = tk.Entry(self.Frame1)
        self.train_rough_rin_ent.place(
            relx=0.422, rely=0.436, height=26, relwidth=0.127)
        self.train_rough_rin_ent.configure(textvariable=IntVar())
        self.train_rough_rin_ent.configure(background="white")
        self.train_rough_rin_ent.configure(disabledforeground="#a3a3a3")
        self.train_rough_rin_ent.configure(font="TkFixedFont")
        self.train_rough_rin_ent.configure(foreground="#000000")
        self.train_rough_rin_ent.configure(highlightbackground="#d9d9d9")
        self.train_rough_rin_ent.configure(highlightcolor="black")
        self.train_rough_rin_ent.configure(insertbackground="black")
        self.train_rough_rin_ent.configure(selectbackground="#c4c4c4")
        self.train_rough_rin_ent.configure(selectforeground="black")

        self.train_rough_rfin_ent = tk.Entry(self.Frame1)
        self.train_rough_rfin_ent.configure(textvariable=IntVar())
        self.train_rough_rfin_ent.place(relx=0.422, rely=0.487, height=26, relwidth=0.127)
        self.train_rough_rfin_ent.configure(background="white")
        self.train_rough_rfin_ent.configure(disabledforeground="#a3a3a3")
        self.train_rough_rfin_ent.configure(font="TkFixedFont")
        self.train_rough_rfin_ent.configure(foreground="#000000")
        self.train_rough_rfin_ent.configure(highlightbackground="#d9d9d9")
        self.train_rough_rfin_ent.configure(highlightcolor="black")
        self.train_rough_rfin_ent.configure(insertbackground="black")
        self.train_rough_rfin_ent.configure(selectbackground="#c4c4c4")
        self.train_rough_rfin_ent.configure(selectforeground="black")

        self.train_ft_len_ent = tk.Entry(self.Frame1)
        self.train_ft_len_ent.place(relx=0.422, rely=0.538, height=26, relwidth=0.127)
        self.train_ft_len_ent.configure(background="white")
        self.train_ft_len_ent.configure(textvariable=IntVar())
        self.train_ft_len_ent.configure(disabledforeground="#a3a3a3")
        self.train_ft_len_ent.configure(font="TkFixedFont")
        self.train_ft_len_ent.configure(foreground="#000000")
        self.train_ft_len_ent.configure(highlightbackground="#d9d9d9")
        self.train_ft_len_ent.configure(highlightcolor="black")
        self.train_ft_len_ent.configure(insertbackground="black")
        self.train_ft_len_ent.configure(selectbackground="#c4c4c4")
        self.train_ft_len_ent.configure(selectforeground="black")

        self.train_ft_rin_ent = tk.Entry(self.Frame1)
        self.train_ft_rin_ent.place(relx=0.422, rely=0.588, height=26, relwidth=0.127)
        self.train_ft_rin_ent.configure(textvariable=IntVar())
        self.train_ft_rin_ent.configure(background="white")
        self.train_ft_rin_ent.configure(disabledforeground="#a3a3a3")
        self.train_ft_rin_ent.configure(font="TkFixedFont")
        self.train_ft_rin_ent.configure(foreground="#000000")
        self.train_ft_rin_ent.configure(highlightbackground="#d9d9d9")
        self.train_ft_rin_ent.configure(highlightcolor="black")
        self.train_ft_rin_ent.configure(insertbackground="black")
        self.train_ft_rin_ent.configure(selectbackground="#c4c4c4")
        self.train_ft_rin_ent.configure(selectforeground="black")

        self.train_ft_rfin_ent = tk.Entry(self.Frame1)
        self.train_ft_rfin_ent.place(relx=0.422, rely=0.639, height=26, relwidth=0.127)
        self.train_ft_rfin_ent.configure(textvariable=IntVar())
        self.train_ft_rfin_ent.configure(background="white")
        self.train_ft_rfin_ent.configure(disabledforeground="#a3a3a3")
        self.train_ft_rfin_ent.configure(font="TkFixedFont")
        self.train_ft_rfin_ent.configure(foreground="#000000")
        self.train_ft_rfin_ent.configure(highlightbackground="#d9d9d9")
        self.train_ft_rfin_ent.configure(highlightcolor="black")
        self.train_ft_rfin_ent.configure(insertbackground="black")
        self.train_ft_rfin_ent.configure(selectbackground="#c4c4c4")
        self.train_ft_rfin_ent.configure(selectforeground="black")

        self.train_len_factor_ent = tk.Entry(self.Frame1)
        self.train_len_factor_ent.place(relx=0.422, rely=0.69, height=26, relwidth=0.127)
        self.train_len_factor_ent.configure(textvariable=IntVar())
        self.train_len_factor_ent.configure(background="white")
        self.train_len_factor_ent.configure(disabledforeground="#a3a3a3")
        self.train_len_factor_ent.configure(font="TkFixedFont")
        self.train_len_factor_ent.configure(foreground="#000000")
        self.train_len_factor_ent.configure(highlightbackground="#d9d9d9")
        self.train_len_factor_ent.configure(highlightcolor="black")
        self.train_len_factor_ent.configure(insertbackground="black")
        self.train_len_factor_ent.configure(selectbackground="#c4c4c4")
        self.train_len_factor_ent.configure(selectforeground="black")

        # initialization
        self.Initialization_ent = tk.Entry(self.Frame1)
        self.Initialization_ent.place(relx=0.135, rely=0.446, relheight=0.031, relwidth=0.121)
        self.Initialization_ent.configure(textvariable=StringVar())
        self.Initialization_ent.configure(takefocus="")

        # normalization
        self.Normalization_ent = tk.Entry(self.Frame1, textvariable=StringVar())
        self.Normalization_ent.place(relx=0.135, rely=0.385, relheight=0.031, relwidth=0.121)
        self.Normalization_ent.configure(background="white")
        self.Normalization_ent.configure(disabledforeground="#a3a3a3")
        self.Normalization_ent.configure(font="TkFixedFont")
        self.Normalization_ent.configure(foreground="#000000")
        self.Normalization_ent.configure(highlightbackground="#d9d9d9")
        self.Normalization_ent.configure(highlightcolor="black")
        self.Normalization_ent.configure(insertbackground="black")
        self.Normalization_ent.configure(selectbackground="#c4c4c4")
        self.Normalization_ent.configure(selectforeground="black")

        self.Instruction = tk.Message(self.Frame1)
        self.Instruction.place(relx=0.563, rely=0.233,relheight=0.3, relwidth=0.3)
        self.Instruction.configure(background="#d9d9d9")
        self.Instruction.configure(borderwidth="2")
        self.Instruction.configure(highlightbackground="#d9d9d9")
        self.Instruction.configure(highlightcolor="black")
        # self.Instruction.configure(insertbackground="black")
        self.Instruction.configure(relief="ridge")
        # self.Instruction.configure(selectbackground="#c4c4c4")
        # self.Instruction.configure(selectforeground="black")
        self.Instruction.configure(font=font9)
        self.Instruction.configure(text='''
        The followings are instruction to perform this model: \n
            1. A preprocessed dataset needs to be selected \n
            2. Input training hyperparameters for SOM model \n
            3. Input cluster number and select 'visuaization' button to select both data and trained model \n
            4. View and save visualizations to local for analysis \n
        \n
        
        Please read about SOMPY for more details about SOM training. For your personal use, you can customize the SOMPY package and add more functions to it.
        ''')

        # Training button to select dataset and train the model
        self.Training = ttk.Button(self.Frame1)
        self.Training.place(relx=0.313, rely=0.811, height=35, width=130)
        self.Training.configure(takefocus="")
        self.Training.configure(command=lambda:self.sm_training())
        self.Training.configure(text='''Train''')

        # the progress bar that indicates the progress of training
        # self.TProgressbar1 = ttk.Progressbar(self.Frame1)
        # self.TProgressbar1.place(relx=0.313, rely=0.892, relwidth=0.234, relheight=0.0, height=22)

        self.vis_gen = ttk.Button(self.Frame1)
        self.vis_gen.place(relx=0.563, rely=0.882, height=35, width=120)
        self.vis_gen.configure(takefocus="")
        self.vis_gen.configure(command=lambda:self.visualizations())
        self.vis_gen.configure(text='''Visualizations''')

        # self.Cluster_Inspector = ttk.Button(self.Frame1)
        # self.Cluster_Inspector.place(relx=0.651, rely=0.882, height=35, width=163)
        # self.Cluster_Inspector.configure(takefocus="")
        # self.Cluster_Inspector.configure(command=self.cluster_inspector())
        # self.Cluster_Inspector.configure(text='''Cluster Inspector''')

        # lattice label
        self.Lattice = tk.Label(self.Frame1)
        self.Lattice.place(relx=0.042, rely=0.507, height=31, width=161)
        self.Lattice.configure(anchor='w')
        self.Lattice.configure(background="#d9d9d9")
        self.Lattice.configure(disabledforeground="#a3a3a3")
        self.Lattice.configure(foreground="#000000")
        self.Lattice.configure(text='''Lattice''')

        # lattice Entry
        self.Lattice_ent = tk.Entry(self.Frame1, textvariable=StringVar())
        self.Lattice_ent.place(relx=0.135, rely=0.507,relheight=0.031, relwidth=0.121)
        self.Lattice_ent.configure(background="white")
        self.Lattice_ent.configure(disabledforeground="#a3a3a3")
        self.Lattice_ent.configure(font="TkFixedFont")
        self.Lattice_ent.configure(foreground="#000000")
        self.Lattice_ent.configure(highlightbackground="#d9d9d9")
        self.Lattice_ent.configure(highlightcolor="black")
        self.Lattice_ent.configure(insertbackground="black")
        self.Lattice_ent.configure(selectbackground="#c4c4c4")
        self.Lattice_ent.configure(selectforeground="black")

        # Mapshape Label
        self.Mapshape = tk.Label(self.Frame1)
        self.Mapshape.place(relx=0.042, rely=0.629,height=31, width=69)
        self.Mapshape.configure(activebackground="#f9f9f9")
        self.Mapshape.configure(activeforeground="black")
        self.Mapshape.configure(anchor='w')
        self.Mapshape.configure(background="#d9d9d9")
        self.Mapshape.configure(disabledforeground="#a3a3a3")
        self.Mapshape.configure(foreground="#000000")
        self.Mapshape.configure(highlightbackground="#d9d9d9")
        self.Mapshape.configure(highlightcolor="black")
        self.Mapshape.configure(text='''Mapshape''')

        # Mapshape Entry
        self.Mapshape_ent = tk.Entry(self.Frame1)
        self.Mapshape_ent.place(relx=0.135, rely=0.629,relheight=0.031, relwidth=0.121)
        self.Mapshape_ent.configure(textvariable=StringVar())
        self.Mapshape_ent.configure(background="white")
        self.Mapshape_ent.configure(disabledforeground="#a3a3a3")
        self.Mapshape_ent.configure(font="TkFixedFont")
        self.Mapshape_ent.configure(foreground="#000000")
        self.Mapshape_ent.configure(highlightbackground="#d9d9d9")
        self.Mapshape_ent.configure(highlightcolor="black")
        self.Mapshape_ent.configure(insertbackground="black")
        self.Mapshape_ent.configure(selectbackground="#c4c4c4")
        self.Mapshape_ent.configure(selectforeground="black")

        # Mask Label
        self.Mask = tk.Label(self.Frame1)
        self.Mask.place(relx=0.042, rely=0.69,height=31, width=69)
        self.Mask.configure(activebackground="#f9f9f9")
        self.Mask.configure(activeforeground="black")
        self.Mask.configure(anchor='w')
        self.Mask.configure(background="#d9d9d9")
        self.Mask.configure(disabledforeground="#a3a3a3")
        self.Mask.configure(foreground="#000000")
        self.Mask.configure(highlightbackground="#d9d9d9")
        self.Mask.configure(highlightcolor="black")
        self.Mask.configure(text='''Mask''')

        # Mask Entry
        self.Mask_ent = tk.Entry(self.Frame1)
        self.Mask_ent.place(relx=0.135, rely=0.69,relheight=0.031, relwidth=0.121)
        self.Mask_ent.configure(textvariable=StringVar())
        self.Mask_ent.configure(background="white")
        self.Mask_ent.configure(disabledforeground="#a3a3a3")
        self.Mask_ent.configure(font="TkFixedFont")
        self.Mask_ent.configure(foreground="#000000")
        self.Mask_ent.configure(highlightbackground="#d9d9d9")
        self.Mask_ent.configure(highlightcolor="black")
        self.Mask_ent.configure(insertbackground="black")
        self.Mask_ent.configure(selectbackground="#c4c4c4")
        self.Mask_ent.configure(selectforeground="black")

        # Training Label
        self.training = tk.Label(self.Frame1)
        self.training.place(relx=0.042, rely=0.751,height=31, width=69)
        self.training.configure(activebackground="#f9f9f9")
        self.training.configure(activeforeground="black")
        self.training.configure(anchor='w')
        self.training.configure(background="#d9d9d9")
        self.training.configure(disabledforeground="#a3a3a3")
        self.training.configure(foreground="#000000")
        self.training.configure(highlightbackground="#d9d9d9")
        self.training.configure(highlightcolor="black")
        self.training.configure(text='''Training''')

        # Training Entry
        self.training_ent = tk.Entry(self.Frame1)
        self.training_ent.place(relx=0.135, rely=0.751,relheight=0.031, relwidth=0.121)
        self.training_ent.configure(textvariable=StringVar())
        self.training_ent.configure(background="white")
        self.training_ent.configure(disabledforeground="#a3a3a3")
        self.training_ent.configure(font="TkFixedFont")
        self.training_ent.configure(foreground="#000000")
        self.training_ent.configure(highlightbackground="#d9d9d9")
        self.training_ent.configure(highlightcolor="black")
        self.training_ent.configure(insertbackground="black")
        self.training_ent.configure(selectbackground="#c4c4c4")
        self.training_ent.configure(selectforeground="black")

        # cluster label
        self.Cluster = tk.Label(self.Frame1)
        self.Cluster.place(relx=0.313, rely=0.751, height=31, width=69)
        self.Cluster.configure(activebackground="#f9f9f9")
        self.Cluster.configure(activeforeground="black")
        self.Cluster.configure(anchor='w')
        self.Cluster.configure(background="#d9d9d9")
        self.Cluster.configure(disabledforeground="#a3a3a3")
        self.Cluster.configure(foreground="#000000")
        self.Cluster.configure(highlightbackground="#d9d9d9")
        self.Cluster.configure(highlightcolor="black")
        self.Cluster.configure(text='''Cluster''')

        # cluster entry
        self.Cluster_ent = tk.Entry(self.Frame1)
        self.Cluster_ent.place(relx=0.422, rely=0.751, height=26, relwidth=0.127)
        self.Cluster_ent.configure(textvariable=IntVar())
        self.Cluster_ent.configure(background="white")
        self.Cluster_ent.configure(disabledforeground="#a3a3a3")
        self.Cluster_ent.configure(font="TkFixedFont")
        self.Cluster_ent.configure(foreground="#000000")
        self.Cluster_ent.configure(highlightbackground="#d9d9d9")
        self.Cluster_ent.configure(highlightcolor="black")
        self.Cluster_ent.configure(insertbackground="black")
        self.Cluster_ent.configure(selectbackground="#c4c4c4")
        self.Cluster_ent.configure(selectforeground="black")

        # lbox select colorcategory
        self.lbox = tk.Listbox(self.Frame1)
        self.lbox.place(relx=0.563, rely=0.588, relheight=0.2, relwidth=0.2)
        self.lbox.configure(background="white")
        self.lbox.configure(disabledforeground="#a3a3a3")
        self.lbox.configure(font="TkFixedFont")
        self.lbox.configure(foreground="#000000")

        self.yscroll = ttk.Scrollbar(command=self.lbox.yview, orient=tk.VERTICAL)
        self.yscroll.grid(row=0, column=1, sticky=tk.N+tk.S)
        self.lbox.configure(yscrollcommand=self.yscroll.set)
        

    def lbox_print(self):
        cnames = ["hacing fun", "play", "comeon","saaaaaap"]
        try:    
            for name in cnames:
                self.lbox.insert(tk.END,name)

            index = self.lbox.curselection()[0]
            seltext = self.lbox.get(index)
            print(seltext)

        except IndexError:
            pass


    def sm_training(self):
        """
        Train the model with different parameters.
        """
        file=askopenfilename(initialdir=dir_name, title="Select Data",
                             filetypes=[("csv files", "*.csv")])
        
        if file is None:
            tk.messagebox.showerror("Error","your chosen file is not valid. \n Please choose again.")

        content=open(file, "rb")
        data=pd.read_csv(content)
        # ind=data[data.columns[0]]
        
        # data = data.set_index(ind)
        comp_names=[name for name in data.columns]
        index = data.index

        # test cali housing first
        df=data.fillna(0).values

        # initialize the build
        sm=SOMFactory().build(
            data=df,
            mapsize=(int(self.Mapsize_x.get()), int(self.Mapsize_y.get())),
            mask=None,
            mapshape='planar',
            lattice=self.Lattice_ent.get(),
            normalization=self.Normalization_ent.get(),
            initialization=self.Initialization_ent.get(),
            neighborhood='gaussian',
            training='batch',
            name='sompy',
            component_names=self.comp_names)

        # start training
        sm.train(n_job=int(self.n_job_ent.get()),
                shared_memory=self.shared_memory_ent.get(),
                verbose=self.verbose_ent.get(),
                train_rough_len=int(self.train_rough_len_ent.get()),
                train_rough_radiusin=int(self.train_rough_rin_ent.get()),
                train_rough_radiusfin=int(self.train_rough_rfin_ent.get()),
                train_finetune_len=int(self.train_ft_len_ent.get()),
                train_finetune_radiusin=int(self.train_ft_rin_ent.get()),
                train_finetune_radiusfin=int(self.train_ft_rfin_ent.get()),
                train_len_factor=int(self.train_len_factor_ent.get()),
                maxtrainlen=np.Inf)

        # errors calculation
        topographic_error=sm.calculate_topographic_error()
        quantitization_error=np.mean(sm._bmu[1])

        # if multiple runs are required
        # joblib.dump(sm, "model_{}.joblib".format(i))

        pickle.dump(sm, open("Models/sm_model", "wb"))

        # print errors on the cmd prompt
        print("the topographic error is %s " % topographic_error)
        print("the quantitization error is %s " % quantitization_error)

    # generate cluster map
    def visualizations(self):
        """
        generate cluster map, component maps and umat map
        """
        # the followings are default, we can customize later
        title="Cluster"

        file_d=askopenfilename(initialdir=dir_name, title="Select Data", filetypes=[("csv files", "*.csv")])
        if file_d is None:
            tk.messagebox.showerror("Error","your chosen file is not valid. \n Please choose again.")
        
        content1=open(file_d, "rb")
        data=pd.read_csv(content1)
        # ind=data[data.columns[0]]
        
        # data = data.set_index(ind)
        comp_names=[name for name in data.columns]

        for name in data.columns:
            self.lbox.insert(tk.END,name)

        file=askopenfilename(initialdir=dir_name, title="Select file", filetypes=[("All files", "*.*")])
        if file is None:
            tk.messagebox.showerror("Error","your chosen file is not valid. \n Please choose again.")
        content2 = open(file, "rb")

        sm = pickle.load(content2)
        labels = list(data.index)
        n_clusters=int(self.Cluster_ent.get())
        
        cmap=plt.get_cmap("tab20")
        n_palette=20  # number of different colors in this color palette
        color_list=[cmap((i % n_palette)/n_palette) for i in range(n_clusters)]
        msz = sm.codebook.mapsize
        proj=sm.project_data(sm.data_raw)
        coord=sm.bmu_ind_to_xy(proj)

        fig, ax=plt.subplots(1, 1, figsize=(40, 40))

        # cl_labels = som.cluster(n_clusters)
        cl_labels=sklearn.cluster.KMeans(
            n_clusters=n_clusters, random_state=555).fit_predict(sm.codebook.matrix)

        # fill each rectangular unit area with cluster color
        # and draw line segment to the border of cluster
        norm=mpl.colors.Normalize(vmin=0, vmax=n_palette, clip=True)

        # borders
        ax.pcolormesh(cl_labels.reshape(msz[0], msz[1]).T % n_palette,
                      cmap=cmap, norm=norm, edgecolors='face',
                      lw=0.5, alpha=0.5)

        ax.scatter(coord[:, 0]+0.5, coord[:, 1]+0.5, c='k', marker='o')
        ax.axis('off')

        for label, x, y in zip(labels, coord[:, 0], coord[:, 1]):
            x += 0.2
            y += 0.2
            # "+ 0.1" means shift of label location to upperright direction

        # randomize the location of the label not to be overwrapped with each other
        # x_text += 0.1 * np.random.randn()
        y += 0.3 * np.random.randn()

        # wrap of label for chemical compound
        # label = str_wrap(label)

        #     ax.text(x+0.3, y+0.3, label,
        #             horizontalalignment='left', verticalalignment='bottom',
        #             rotation=30, fontsize=15, weight='semibold')

        plt.title(title)
        
        # save as png file
        plt.savefig("Images/Cluster.png")

        # umat map
        # n_clusters=int(self.Cluster_ent.get())
        umatrixTFP = tfprop_vis.UMatrixTFP(0, 0, '', text_size=14)
        cmap = plt.get_cmap('RdYlBu_r')  # set color map
        umat = umatrixTFP.show(sm, pd.DataFrame(labels),pd.DataFrame(labels), "Images/umat.png",show_data=True, labels=False, contooor=True,cmap=cmap,blob = False)

        # component maps
        htmap_x, htmap_y = (10, 10)
        viewTFP = tfprop_vis.ViewTFP(htmap_x, htmap_y, '',text_size=10)

        cl_labels = sklearn.cluster.KMeans(n_clusters = n_clusters, random_state = 555).fit_predict(sm.codebook.matrix)

        # for i in range(0,len(data.columns)):
        #     comp_map = viewTFP.show(sm, cl_labels, "Images/heatmap" + str(i) + ".png", col_sz=1,
        #         which_dim=i, desnormalize=True, col_norm='median',cmap=cmap)

        cmap = plt.get_cmap('RdYlBu_r')  # set color map
        comp_map = viewTFP.show(sm, cl_labels, "Images/heatmap.png", col_sz=3,
                    which_dim='all', desnormalize=True, col_norm='median',cmap=cmap)

    # def cluster_inspector(self):
        # This makes all the loggers stay quiet unless it's important
        logging.getLogger().setLevel(logging.WARNING)

        cl_labels2 = ci.kmeans_clust(sm, n_clusters)
        clusters_list = ci.sort_materials_by_cluster(sm,data,cl_labels2)

        # # This makes it so it will display the full lists
        # pd.set_option('display.max_rows', 2000)
        # pd.set_option('display.width', 1000)
        # pd.set_option("display.max_columns",50)

        # # This should be the last statement of the cell, to make it display
        # # That, or assign the return value to a variable, and have that variable be the final expression in a cell
        # ci.cluster_tabs(sm, data, clusters_list, cl_labels2)
        
        # save the content of each cluster to csv file
        for i in range(n_clusters):
            ind = clusters_list[i]
            data.iloc[ind].to_csv("Data/cluster_ %s" % i + ".csv")

        # Projection Map Method starts here, I combine it in the vis function

        index = self.lbox.curselection()[0] # needs to be one thing in the dataset, it can be outside of data
        colorcategory = self.lbox.get(index)

        # if len(colorcategory) > 1:
        #     tk.messagebox.showerror("Error", "Choose only one to generate the projection map.")

        categories = data[colorcategory] #if colorcategory is one col of the dataset
        cmap = plt.get_cmap("tab20") #cmap for background
        n_palette = 20  # number of different colors in this color palette
        color_list = [cmap((i % n_palette)/n_palette) for i in range(n_clusters)]
        msz = sm.codebook.mapsize
        proj = sm.project_data(sm.data_raw)
        coord = sm.bmu_ind_to_xy(proj)

        fig, ax = plt.subplots(1, 1, figsize=(30,30))

        # fill each rectangular unit area with cluster color
        #  and draw line segment to the border of cluster
        norm = mpl.colors.Normalize(vmin=0, vmax=n_palette, clip=True)
        ax.pcolormesh(cl_labels.reshape(msz[0], msz[1]).T % n_palette,
                    cmap=cmap, norm=norm, edgecolors='face',
                    lw=0.5, alpha=0.5)

        ax.scatter(coord[:, 0]+0.5, coord[:, 1]+0.5, c='k', marker='o')
        ax.axis('off')

        categoryname = list(data.groupby(colorcategory).count().index)
        categories_int = categories.apply(categoryname.index)

        N = len(categoryname)
        cmap_labels = plt.cm.gist_ncar
        # extract all colors from the .jet map
        cmaplist = [cmap_labels(i) for i in range(cmap_labels.N)]
        # create the new map
        cmap_labels = cmap_labels.from_list('Custom cmap', cmaplist, cmap_labels.N)
        # define the bins and normalize
        bounds = np.linspace(0,N,N+1)
        norm_labels = mpl.colors.BoundaryNorm(bounds, cmap_labels.N)

        scat = ax.scatter(coord[:, 0]+0.5, coord[:, 1]+0.5, c=categories_int,s=300,cmap=cmap_labels,norm=norm_labels)
        cbar = plt.colorbar(scat, spacing='proportional',ticks=bounds)
        cbar.ax.get_yaxis().set_ticks([])
        
        for j, lab in enumerate(categoryname):
            cbar.ax.text(1, (2 * j + 1) / (2*(len(categoryname))), lab, ha='left', va='center', fontsize=30)
        cbar.ax.get_yaxis().labelpad = 15
        #cbar.ax.set_ylabel('# of contacts', rotation=270)
        ax.axis('off')

        for label, x, y in zip(labels, coord[:, 0], coord[:, 1]):
            x += 0.2
            y += 0.2
            # "+ 0.1" means shift of label location to upperright direction

            # randomize the location of the label
            #   not to be overwrapped with each other
            # x_text += 0.1 * np.random.randn()
            y += 0.3 * np.random.randn()

            # wrap of label for chemical compound
            #label = str_wrap(label)

            #ax.text(x+0.3, y+0.3, label,
                    #  horizontalalignment='left', verticalalignment='bottom',
                    #  rotation=30, fontsize=12, weight='semibold')
            #cl_labels = som.cluster(n_clusters)
        cl_labels = sklearn.cluster.KMeans(n_clusters = n_clusters, 
                                        random_state = 555).fit_predict(sm.codebook.matrix)

        for i in range(len(cl_labels)):
            rect_x = [i // msz[1], i // msz[1],
                    i // msz[1] + 1, i // msz[1] + 1]
            rect_y = [i % msz[1], i % msz[1] + 1,
                    i % msz[1] + 1, i % msz[1]]

            if i % msz[1] + 1 < msz[1]:  # top border
                if cl_labels[i] != cl_labels[i+1]:
                    ax.plot([rect_x[1], rect_x[2]],
                            [rect_y[1], rect_y[2]], 'k-', lw=2.5)

            if i + msz[1] < len(cl_labels):  # right border
                if cl_labels[i] != cl_labels[i+msz[1]]:
                    ax.plot([rect_x[2], rect_x[3]],
                            [rect_y[2], rect_y[3]], 'k-', lw=2.5)

        plt.savefig("Images/Projection" + colorcategory + ".png")
        plt.title(colorcategory,fontsize = 50)
        return cl_labels

if __name__ == '__main__':
    vp_start_gui()
