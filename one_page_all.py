#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 23, 2020 07:51:02 PM PST  platform: Windows NT
# Author: Jingtian Zhang

import warnings
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import one_page_all_support
from tkinter import filedialog as tkFileDialog
from tkinter.filedialog import askopenfile
from tkinter.filedialog import askopenfilename

# import sompy / tfprop_sompy related packages
import math
import glob
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import urllib
import random
import matplotlib as mpl
from sompy.sompy import SOMFactory
from sompy.visualization.plot_tools import plot_hex_map
import logging
import pickle
import os

import sklearn
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit
from sklearn import cluster
# from sklearn.externals import joblib
import joblib

# cluster inspector
import importlib
import logging
from tfprop_sompy import tfprop_config
from tfprop_sompy import tfprop_vis
from tfprop_sompy import tfprop_config as tfpinit
from tfprop_sompy import cluster_inspector as ci
importlib.reload(ci)

warnings.filterwarnings('ignore')

logging.getLogger('matplotlib.font_manager').disabled = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    one_page_all_support.set_Tk_var()
    top = Toplevel1(root)
    one_page_all_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    one_page_all_support.set_Tk_var()
    top = Toplevel1(w)
    one_page_all_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


# combobox setting
init = ["pca", "random"]
norm = ["var"]
lattice = ["hexa", "rect"]
names = ["hello", "hi", "nihao"]


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[
                       ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1920x986+-9+-11")
        top.minsize(176, 1)
        top.maxsize(1924, 1050)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Title = tk.Label(self.Frame1)
        self.Title.place(relx=0.219, rely=0.122, height=51, width=195)
        self.Title.configure(activebackground="#f9f9f9")
        self.Title.configure(activeforeground="black")
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(disabledforeground="#a3a3a3")
        self.Title.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.Title.configure(foreground="#000000")
        self.Title.configure(highlightbackground="#d9d9d9")
        self.Title.configure(highlightcolor="black")
        self.Title.configure(text='''SOM Trainer''')

        # self.Data_entry = tk.Entry(self.Frame1)
        # self.Data_entry.place(relx=0.109, rely=0.274,height=26, relwidth=0.096)
        # self.Data_entry.configure(background="white")
        # self.Data_entry.configure(disabledforeground="#a3a3a3")
        # self.Data_entry.configure(font="TkFixedFont")
        # self.Data_entry.configure(foreground="#000000")
        # self.Data_entry.configure(highlightbackground="#d9d9d9")
        # self.Data_entry.configure(highlightcolor="black")
        # self.Data_entry.configure(insertbackground="black")
        # self.Data_entry.configure(selectbackground="#c4c4c4")
        # self.Data_entry.configure(selectforeground="black")

        self.Data = tk.Label(self.Frame1)
        self.Data.place(relx=0.042, rely=0.274, height=31, width=43)
        self.Data.configure(activebackground="#f9f9f9")
        self.Data.configure(activeforeground="black")
        self.Data.configure(anchor='w')
        self.Data.configure(background="#d9d9d9")
        self.Data.configure(disabledforeground="#a3a3a3")
        self.Data.configure(foreground="#000000")
        self.Data.configure(highlightbackground="#d9d9d9")
        self.Data.configure(highlightcolor="black")
        self.Data.configure(text='''Data''')

        self.Mapsize = tk.Label(self.Frame1)
        self.Mapsize.place(relx=0.042, rely=0.325, height=31, width=71)
        self.Mapsize.configure(activebackground="#f9f9f9")
        self.Mapsize.configure(activeforeground="black")
        self.Mapsize.configure(anchor='w')
        self.Mapsize.configure(background="#d9d9d9")
        self.Mapsize.configure(disabledforeground="#a3a3a3")
        self.Mapsize.configure(foreground="#000000")
        self.Mapsize.configure(highlightbackground="#d9d9d9")
        self.Mapsize.configure(highlightcolor="black")
        self.Mapsize.configure(text='''Mapsize''')

        self.Normalization = tk.Label(self.Frame1)
        self.Normalization.place(relx=0.042, rely=0.385, height=31, width=117)
        self.Normalization.configure(activebackground="#f9f9f9")
        self.Normalization.configure(activeforeground="black")
        self.Normalization.configure(anchor='w')
        self.Normalization.configure(background="#d9d9d9")
        self.Normalization.configure(disabledforeground="#a3a3a3")
        self.Normalization.configure(foreground="#000000")
        self.Normalization.configure(highlightbackground="#d9d9d9")
        self.Normalization.configure(highlightcolor="black")
        self.Normalization.configure(text='''Normalization''')

        self.Initialization = tk.Label(self.Frame1)
        self.Initialization.place(relx=0.042, rely=0.446, height=31, width=105)
        self.Initialization.configure(activebackground="#f9f9f9")
        self.Initialization.configure(activeforeground="black")
        self.Initialization.configure(anchor='w')
        self.Initialization.configure(background="#d9d9d9")
        self.Initialization.configure(disabledforeground="#a3a3a3")
        self.Initialization.configure(foreground="#000000")
        self.Initialization.configure(highlightbackground="#d9d9d9")
        self.Initialization.configure(highlightcolor="black")
        self.Initialization.configure(text='''Initialization''')

        # self.Comp_Name = tk.Label(self.Frame1)
        # self.Comp_Name.place(relx=0.042, rely=0.507, height=31, width=161)
        # self.Comp_Name.configure(activebackground="#f9f9f9")
        # self.Comp_Name.configure(activeforeground="black")
        # self.Comp_Name.configure(anchor='w')
        # self.Comp_Name.configure(background="#d9d9d9")
        # self.Comp_Name.configure(disabledforeground="#a3a3a3")
        # self.Comp_Name.configure(foreground="#000000")
        # self.Comp_Name.configure(highlightbackground="#d9d9d9")
        # self.Comp_Name.configure(highlightcolor="black")
        # self.Comp_Name.configure(text='''Component Names''')

        self.Mapsize_x = tk.Entry(self.Frame1)
        self.Mapsize_x.place(relx=0.109, rely=0.325, height=26, relwidth=0.054)
        self.Mapsize_x.configure(background="white")
        self.Mapsize_x.configure(disabledforeground="#a3a3a3")
        self.Mapsize_x.configure(font="TkFixedFont")
        self.Mapsize_x.configure(foreground="#000000")
        self.Mapsize_x.configure(highlightbackground="#d9d9d9")
        self.Mapsize_x.configure(highlightcolor="black")
        self.Mapsize_x.configure(insertbackground="black")
        self.Mapsize_x.configure(selectbackground="#c4c4c4")
        self.Mapsize_x.configure(selectforeground="black")

        self.train_ft_rin = tk.Label(self.Frame1)
        self.train_ft_rin.place(relx=0.313, rely=0.588, height=31, width=181)
        self.train_ft_rin.configure(activebackground="#f9f9f9")
        self.train_ft_rin.configure(activeforeground="black")
        self.train_ft_rin.configure(anchor='w')
        self.train_ft_rin.configure(background="#d9d9d9")
        self.train_ft_rin.configure(disabledforeground="#a3a3a3")
        self.train_ft_rin.configure(foreground="#000000")
        self.train_ft_rin.configure(highlightbackground="#d9d9d9")
        self.train_ft_rin.configure(highlightcolor="black")
        self.train_ft_rin.configure(text='''train_finetune_radiusin''')

        self.train_rg_rfin = tk.Label(self.Frame1)
        self.train_rg_rfin.place(relx=0.313, rely=0.487, height=31, width=171)
        self.train_rg_rfin.configure(activebackground="#f9f9f9")
        self.train_rg_rfin.configure(activeforeground="black")
        self.train_rg_rfin.configure(anchor='w')
        self.train_rg_rfin.configure(background="#d9d9d9")
        self.train_rg_rfin.configure(disabledforeground="#a3a3a3")
        self.train_rg_rfin.configure(foreground="#000000")
        self.train_rg_rfin.configure(highlightbackground="#d9d9d9")
        self.train_rg_rfin.configure(highlightcolor="black")
        self.train_rg_rfin.configure(text='''train_rough_radiusfin''')

        self.shared_memory = tk.Label(self.Frame1)
        self.shared_memory.place(relx=0.313, rely=0.284, height=31, width=133)
        self.shared_memory.configure(activebackground="#f9f9f9")
        self.shared_memory.configure(activeforeground="black")
        self.shared_memory.configure(anchor='w')
        self.shared_memory.configure(background="#d9d9d9")
        self.shared_memory.configure(disabledforeground="#a3a3a3")
        self.shared_memory.configure(foreground="#000000")
        self.shared_memory.configure(highlightbackground="#d9d9d9")
        self.shared_memory.configure(highlightcolor="black")
        self.shared_memory.configure(text='''shared_memory''')

        self.train_rough_len = tk.Label(self.Frame1)
        self.train_rough_len.place(
            relx=0.313, rely=0.385, height=31, width=126)
        self.train_rough_len.configure(activebackground="#f9f9f9")
        self.train_rough_len.configure(activeforeground="black")
        self.train_rough_len.configure(anchor='w')
        self.train_rough_len.configure(background="#d9d9d9")
        self.train_rough_len.configure(disabledforeground="#a3a3a3")
        self.train_rough_len.configure(foreground="#000000")
        self.train_rough_len.configure(highlightbackground="#d9d9d9")
        self.train_rough_len.configure(highlightcolor="black")
        self.train_rough_len.configure(text='''train_rough_len''')

        self.train_rough_rin = tk.Label(self.Frame1)
        self.train_rough_rin.place(
            relx=0.313, rely=0.436, height=31, width=165)
        self.train_rough_rin.configure(activebackground="#f9f9f9")
        self.train_rough_rin.configure(activeforeground="black")
        self.train_rough_rin.configure(anchor='w')
        self.train_rough_rin.configure(background="#d9d9d9")
        self.train_rough_rin.configure(disabledforeground="#a3a3a3")
        self.train_rough_rin.configure(foreground="#000000")
        self.train_rough_rin.configure(highlightbackground="#d9d9d9")
        self.train_rough_rin.configure(highlightcolor="black")
        self.train_rough_rin.configure(text='''train_rough_radiusin''')

        self.train_ft_len = tk.Label(self.Frame1)
        self.train_ft_len.place(relx=0.313, rely=0.538, height=31, width=142)
        self.train_ft_len.configure(activebackground="#f9f9f9")
        self.train_ft_len.configure(activeforeground="black")
        self.train_ft_len.configure(anchor='w')
        self.train_ft_len.configure(background="#d9d9d9")
        self.train_ft_len.configure(disabledforeground="#a3a3a3")
        self.train_ft_len.configure(foreground="#000000")
        self.train_ft_len.configure(highlightbackground="#d9d9d9")
        self.train_ft_len.configure(highlightcolor="black")
        self.train_ft_len.configure(text='''train_finetune_len''')

        self.n_job = tk.Label(self.Frame1)
        self.n_job.place(relx=0.313, rely=0.233, height=31, width=49)
        self.n_job.configure(activebackground="#f9f9f9")
        self.n_job.configure(activeforeground="black")
        self.n_job.configure(anchor='w')
        self.n_job.configure(background="#d9d9d9")
        self.n_job.configure(disabledforeground="#a3a3a3")
        self.n_job.configure(foreground="#000000")
        self.n_job.configure(highlightbackground="#d9d9d9")
        self.n_job.configure(highlightcolor="black")
        self.n_job.configure(text='''n_job''')

        self.verbose = tk.Label(self.Frame1)
        self.verbose.place(relx=0.313, rely=0.335, height=31, width=69)
        self.verbose.configure(activebackground="#f9f9f9")
        self.verbose.configure(activeforeground="black")
        self.verbose.configure(anchor='w')
        self.verbose.configure(background="#d9d9d9")
        self.verbose.configure(disabledforeground="#a3a3a3")
        self.verbose.configure(foreground="#000000")
        self.verbose.configure(highlightbackground="#d9d9d9")
        self.verbose.configure(highlightcolor="black")
        self.verbose.configure(text='''verbose''')

        self.train_ft_rfin = tk.Label(self.Frame1)
        self.train_ft_rfin.place(relx=0.313, rely=0.639, height=31, width=187)
        self.train_ft_rfin.configure(activebackground="#f9f9f9")
        self.train_ft_rfin.configure(activeforeground="black")
        self.train_ft_rfin.configure(anchor='w')
        self.train_ft_rfin.configure(background="#d9d9d9")
        self.train_ft_rfin.configure(disabledforeground="#a3a3a3")
        self.train_ft_rfin.configure(foreground="#000000")
        self.train_ft_rfin.configure(highlightbackground="#d9d9d9")
        self.train_ft_rfin.configure(highlightcolor="black")
        self.train_ft_rfin.configure(text='''train_finetune_radiusfin''')

        self.train_len_factor = tk.Label(self.Frame1)
        self.train_len_factor.place(
            relx=0.313, rely=0.69, height=31, width=124)
        self.train_len_factor.configure(activebackground="#f9f9f9")
        self.train_len_factor.configure(activeforeground="black")
        self.train_len_factor.configure(anchor='w')
        self.train_len_factor.configure(background="#d9d9d9")
        self.train_len_factor.configure(disabledforeground="#a3a3a3")
        self.train_len_factor.configure(foreground="#000000")
        self.train_len_factor.configure(highlightbackground="#d9d9d9")
        self.train_len_factor.configure(highlightcolor="black")
        self.train_len_factor.configure(text='''train_len_factor''')

        self.maxtrainlen = tk.Label(self.Frame1)
        self.maxtrainlen.place(relx=0.313, rely=0.74, height=31, width=97)
        self.maxtrainlen.configure(activebackground="#f9f9f9")
        self.maxtrainlen.configure(activeforeground="black")
        self.maxtrainlen.configure(anchor='w')
        self.maxtrainlen.configure(background="#d9d9d9")
        self.maxtrainlen.configure(disabledforeground="#a3a3a3")
        self.maxtrainlen.configure(foreground="#000000")
        self.maxtrainlen.configure(highlightbackground="#d9d9d9")
        self.maxtrainlen.configure(highlightcolor="black")
        self.maxtrainlen.configure(text='''maxtrainlen''')

        self.n_job_ent = tk.Entry(self.Frame1)
        self.n_job_ent.place(relx=0.422, rely=0.233, height=26, relwidth=0.127)
        self.n_job_ent.configure(background="white")
        self.n_job_ent.configure(disabledforeground="#a3a3a3")
        self.n_job_ent.configure(font="TkFixedFont")
        self.n_job_ent.configure(foreground="#000000")
        self.n_job_ent.configure(highlightbackground="#d9d9d9")
        self.n_job_ent.configure(highlightcolor="black")
        self.n_job_ent.configure(insertbackground="black")
        self.n_job_ent.configure(selectbackground="#c4c4c4")
        self.n_job_ent.configure(selectforeground="black")

        self.shared_memory_ent = tk.Entry(self.Frame1)
        self.shared_memory_ent.place(
            relx=0.422, rely=0.284, height=26, relwidth=0.127)
        self.shared_memory_ent.configure(background="white")
        self.shared_memory_ent.configure(disabledforeground="#a3a3a3")
        self.shared_memory_ent.configure(font="TkFixedFont")
        self.shared_memory_ent.configure(foreground="#000000")
        self.shared_memory_ent.configure(highlightbackground="#d9d9d9")
        self.shared_memory_ent.configure(highlightcolor="black")
        self.shared_memory_ent.configure(insertbackground="black")
        self.shared_memory_ent.configure(selectbackground="#c4c4c4")
        self.shared_memory_ent.configure(selectforeground="black")

        self.verbose_ent = tk.Entry(self.Frame1)
        self.verbose_ent.place(relx=0.422, rely=0.335,
                               height=26, relwidth=0.127)

        self.verbose_ent.configure(background="white")
        self.verbose_ent.configure(disabledforeground="#a3a3a3")
        self.verbose_ent.configure(font="TkFixedFont")
        self.verbose_ent.configure(foreground="#000000")
        self.verbose_ent.configure(highlightbackground="#d9d9d9")
        self.verbose_ent.configure(highlightcolor="black")
        self.verbose_ent.configure(insertbackground="black")
        self.verbose_ent.configure(selectbackground="#c4c4c4")
        self.verbose_ent.configure(selectforeground="black")

        self.train_rough_len_ent = tk.Entry(self.Frame1)
        self.train_rough_len_ent.place(
            relx=0.422, rely=0.385, height=26, relwidth=0.127)
        self.train_rough_len_ent.configure(background="white")
        self.train_rough_len_ent.configure(disabledforeground="#a3a3a3")
        self.train_rough_len_ent.configure(font="TkFixedFont")
        self.train_rough_len_ent.configure(foreground="#000000")
        self.train_rough_len_ent.configure(highlightbackground="#d9d9d9")
        self.train_rough_len_ent.configure(highlightcolor="black")
        self.train_rough_len_ent.configure(insertbackground="black")
        self.train_rough_len_ent.configure(selectbackground="#c4c4c4")
        self.train_rough_len_ent.configure(selectforeground="black")

        self.train_rough_rin_ent = tk.Entry(self.Frame1)
        self.train_rough_rin_ent.place(
            relx=0.422, rely=0.436, height=26, relwidth=0.127)
        self.train_rough_rin_ent.configure(background="white")
        self.train_rough_rin_ent.configure(disabledforeground="#a3a3a3")
        self.train_rough_rin_ent.configure(font="TkFixedFont")
        self.train_rough_rin_ent.configure(foreground="#000000")
        self.train_rough_rin_ent.configure(highlightbackground="#d9d9d9")
        self.train_rough_rin_ent.configure(highlightcolor="black")
        self.train_rough_rin_ent.configure(insertbackground="black")
        self.train_rough_rin_ent.configure(selectbackground="#c4c4c4")
        self.train_rough_rin_ent.configure(selectforeground="black")

        self.train_rough_rfin_ent = tk.Entry(self.Frame1)
        self.train_rough_rfin_ent.place(
            relx=0.422, rely=0.487, height=26, relwidth=0.127)
        self.train_rough_rfin_ent.configure(background="white")
        self.train_rough_rfin_ent.configure(disabledforeground="#a3a3a3")
        self.train_rough_rfin_ent.configure(font="TkFixedFont")
        self.train_rough_rfin_ent.configure(foreground="#000000")
        self.train_rough_rfin_ent.configure(highlightbackground="#d9d9d9")
        self.train_rough_rfin_ent.configure(highlightcolor="black")
        self.train_rough_rfin_ent.configure(insertbackground="black")
        self.train_rough_rfin_ent.configure(selectbackground="#c4c4c4")
        self.train_rough_rfin_ent.configure(selectforeground="black")

        self.train_ft_len_ent = tk.Entry(self.Frame1)
        self.train_ft_len_ent.place(
            relx=0.422, rely=0.538, height=26, relwidth=0.127)
        self.train_ft_len_ent.configure(background="white")
        self.train_ft_len_ent.configure(disabledforeground="#a3a3a3")
        self.train_ft_len_ent.configure(font="TkFixedFont")
        self.train_ft_len_ent.configure(foreground="#000000")
        self.train_ft_len_ent.configure(highlightbackground="#d9d9d9")
        self.train_ft_len_ent.configure(highlightcolor="black")
        self.train_ft_len_ent.configure(insertbackground="black")
        self.train_ft_len_ent.configure(selectbackground="#c4c4c4")
        self.train_ft_len_ent.configure(selectforeground="black")

        self.train_ft_rin_ent = tk.Entry(self.Frame1)
        self.train_ft_rin_ent.place(
            relx=0.422, rely=0.588, height=26, relwidth=0.127)
        self.train_ft_rin_ent.configure(background="white")
        self.train_ft_rin_ent.configure(disabledforeground="#a3a3a3")
        self.train_ft_rin_ent.configure(font="TkFixedFont")
        self.train_ft_rin_ent.configure(foreground="#000000")
        self.train_ft_rin_ent.configure(highlightbackground="#d9d9d9")
        self.train_ft_rin_ent.configure(highlightcolor="black")
        self.train_ft_rin_ent.configure(insertbackground="black")
        self.train_ft_rin_ent.configure(selectbackground="#c4c4c4")
        self.train_ft_rin_ent.configure(selectforeground="black")

        self.train_ft_rfin_ent = tk.Entry(self.Frame1)
        self.train_ft_rfin_ent.place(
            relx=0.422, rely=0.639, height=26, relwidth=0.127)
        self.train_ft_rfin_ent.configure(background="white")
        self.train_ft_rfin_ent.configure(disabledforeground="#a3a3a3")
        self.train_ft_rfin_ent.configure(font="TkFixedFont")
        self.train_ft_rfin_ent.configure(foreground="#000000")
        self.train_ft_rfin_ent.configure(highlightbackground="#d9d9d9")
        self.train_ft_rfin_ent.configure(highlightcolor="black")
        self.train_ft_rfin_ent.configure(insertbackground="black")
        self.train_ft_rfin_ent.configure(selectbackground="#c4c4c4")
        self.train_ft_rfin_ent.configure(selectforeground="black")

        self.train_len_factor_ent = tk.Entry(self.Frame1)
        self.train_len_factor_ent.place(
            relx=0.422, rely=0.69, height=26, relwidth=0.127)
        self.train_len_factor_ent.configure(background="white")
        self.train_len_factor_ent.configure(disabledforeground="#a3a3a3")
        self.train_len_factor_ent.configure(font="TkFixedFont")
        self.train_len_factor_ent.configure(foreground="#000000")
        self.train_len_factor_ent.configure(highlightbackground="#d9d9d9")
        self.train_len_factor_ent.configure(highlightcolor="black")
        self.train_len_factor_ent.configure(insertbackground="black")
        self.train_len_factor_ent.configure(selectbackground="#c4c4c4")
        self.train_len_factor_ent.configure(selectforeground="black")

        self.maxtrainlen_ent = tk.Entry(self.Frame1)
        self.maxtrainlen_ent.place(
            relx=0.422, rely=0.74, height=26, relwidth=0.127)
        self.maxtrainlen_ent.configure(background="white")
        self.maxtrainlen_ent.configure(disabledforeground="#a3a3a3")
        self.maxtrainlen_ent.configure(font="TkFixedFont")
        self.maxtrainlen_ent.configure(foreground="#000000")
        self.maxtrainlen_ent.configure(highlightbackground="#d9d9d9")
        self.maxtrainlen_ent.configure(highlightcolor="black")
        self.maxtrainlen_ent.configure(insertbackground="black")
        self.maxtrainlen_ent.configure(selectbackground="#c4c4c4")
        self.maxtrainlen_ent.configure(selectforeground="black")

        self.Mapsize_y = tk.Entry(self.Frame1)
        self.Mapsize_y.place(relx=0.177, rely=0.325, height=26, relwidth=0.059)
        self.Mapsize_y.configure(background="white")
        self.Mapsize_y.configure(disabledforeground="#a3a3a3")
        self.Mapsize_y.configure(font="TkFixedFont")
        self.Mapsize_y.configure(foreground="#000000")
        self.Mapsize_y.configure(highlightbackground="#d9d9d9")
        self.Mapsize_y.configure(highlightcolor="black")
        self.Mapsize_y.configure(insertbackground="black")
        self.Mapsize_y.configure(selectbackground="#c4c4c4")
        self.Mapsize_y.configure(selectforeground="black")

        # initialization
        self.Initialization_ent = ttk.Combobox(self.Frame1, values=init)
        self.Initialization_ent.place(
            relx=0.135, rely=0.446, relheight=0.031, relwidth=0.121)
        self.Initialization_ent.configure(
            textvariable=one_page_all_support.combobox)
        self.Initialization_ent.configure(takefocus="")

        # normalization
        self.Normalization_ent = ttk.Combobox(self.Frame1, values=norm)
        self.Normalization_ent.place(
            relx=0.135, rely=0.385, relheight=0.031, relwidth=0.121)
        self.Normalization_ent.configure(
            textvariable=one_page_all_support.combobox)
        self.Normalization_ent.configure(takefocus="")

        self.Canvas1 = tk.Canvas(self.Frame1)
        self.Canvas1.place(relx=0.563, rely=0.183,
                           relheight=0.672, relwidth=0.418)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

        self.Training = ttk.Button(self.Frame1)
        self.Training.place(relx=0.313, rely=0.811, height=35, width=130)
        self.Training.configure(takefocus="")
        self.Training.configure(command=self.sm_training())
        self.Training.configure(text='''Train''')

        # the progress bar that indicates the progress of training
        self.TProgressbar1 = ttk.Progressbar(self.Frame1)
        self.TProgressbar1.place(
            relx=0.313, rely=0.892, relwidth=0.234, relheight=0.0, height=22)

        self.Next_vis_btn1 = ttk.Button(self.Frame1)
        self.Next_vis_btn1.place(relx=0.76, rely=0.882, height=35, width=120)
        self.Next_vis_btn1.configure(takefocus="")
        self.Next_vis_btn1.configure(text='''Next''')
        self.Next_vis_btn1.configure(command=self.vis())

        # self.Export_vis = ttk.Button(self.Frame1)
        # self.Export_vis.place(relx=0.854, rely=0.882, height=35, width=120)
        # self.Export_vis.configure(takefocus="")
        # self.Export_vis.configure(command=self.export)
        # self.Export_vis.configure(text='''Export''')

        self.Select_Model = ttk.Button(self.Frame1)
        self.Select_Model.place(relx=0.474, rely=0.811, height=35, width=140)
        self.Select_Model.configure(takefocus="")
        self.Select_Model.configure(command=self.askopensmfile())
        self.Select_Model.configure(text='''Select Model''')

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.406, rely=0.801, height=42, width=72)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''or''')

        self.vis_gen = ttk.Button(self.Frame1)
        self.vis_gen.place(relx=0.563, rely=0.882, height=35, width=120)
        self.vis_gen.configure(takefocus="")
        self.vis_gen.configure(command=self.vis())
        self.vis_gen.configure(text='''Gen Vis''')

        self.Cluster_Inspector = ttk.Button(self.Frame1)
        self.Cluster_Inspector.place(
            relx=0.651, rely=0.882, height=35, width=163)
        self.Cluster_Inspector.configure(takefocus="")
        self.Cluster_Inspector.configure(command=self.Cluster_Inspector())
        self.Cluster_Inspector.configure(text='''Cluster Inspector''')

        # self.Comp_Name_ent = ttk.Combobox(self.Frame1, values=names)
        # self.Comp_Name_ent.place(
        #     relx=0.135, rely=0.507, relheight=0.031, relwidth=0.121)
        # self.Comp_Name_ent.configure(
        #     textvariable=one_page_all_support.combobox)
        # self.Comp_Name_ent.configure(background="#000000")
        # self.Comp_Name_ent.configure(takefocus="")

        self.Find_File = ttk.Button(self.Frame1)
        self.Find_File.place(relx=0.109, rely=0.274, height=35, width=120)
        self.Find_File.configure(takefocus="")
        self.Find_File.configure(command=self.askopencsvfile())
        self.Find_File.configure(text='''Select Data''')

        self.Message1 = tk.Message(self.Frame1)
        self.Message1.place(relx=0.036, rely=0.639,
                            relheight=0.109, relwidth=0.249)
        self.Message1.configure(anchor='nw')
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(font="-family {Segoe UI} -size 11")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(
            text='''This is a SOM Tool that trains the input design matrix and output a model and visualizations.''')
        self.Message1.configure(width=478)

        self.Lattice = tk.Label(self.Frame1)
        self.Lattice.place(relx=0.042, rely=0.568, height=31, width=147)
        self.Lattice.configure(anchor='w')
        self.Lattice.configure(background="#d9d9d9")
        self.Lattice.configure(disabledforeground="#a3a3a3")
        self.Lattice.configure(foreground="#000000")
        self.Lattice.configure(text='''Lattice''')

        self.Lattice_ent = ttk.Combobox(self.Frame1, values=lattice)
        self.Lattice_ent.place(relx=0.135, rely=0.568,
                               relheight=0.031, relwidth=0.121)
        self.Lattice_ent.configure(textvariable=one_page_all_support.combobox)
        self.Lattice_ent.configure(takefocus="")

    # embedded functions are here

    # ask to open file
    # def askopencsvfile(self):
    #     return tkFileDialog.askopenfile(initialdir="/", title="Select data file", filetypes=(("csv files", "*.csv"), ("all files", "*.*")))

    def askopensmfile(self):
        return tkFileDialog.askopenfile(initialdir="/", title="Select model file", filetypes=(("sm files", "*.File"), ("all files", "*.*")))

    # read data
    # callback1 --> select data
    def read_data(self):
        """
        input: csv file chosen from the directory
        """
        file = tkFileDialog.askopenfile(mode ='r', filetypes =[('csv Files', '*.csv')]) 
        if file is not None:
            content = pd.read_csv(file)
            return content
        else:
            assert("Input Error, Select Again")

    def read_comp_names(self):
        """
        Input: nxm data matrix
        """
        data = self.read_data()
        return [names for name in data.columns]

    # training som, export model and print errors
    def sm_training(self):
        """
        Train the model with different parameters.
        """
        data = self.read_data()

        # basic parameters for initialization
        mapsize = (self.Mapsize_x.get(), self.Mapsize_y.get())
        normalization = self.Normalization_ent.get()
        initialization = self.Initialization_ent.get()
        component_names = self.read_comp_names()
        lattice = self.Lattice_ent.get()

        # parameters for training and tuning
        n_job = self.n_job_ent.get()
        shared_memory = self.shared_memory_ent.get()
        verbose = self.verbose_ent.get()
        train_rough_len = self.train_ft_len_ent.get()
        train_rough_radiusin = self.train_rough_rin_ent.get()
        train_rough_radiusfin = self.train_rough_rfin_ent.get()
        train_finetune_len = self.train_ft_len_ent.get()
        train_finetune_radiusin = self.train_ft_rin_ent.get()
        train_finetune_radiusfin = self.train_ft_rfin_ent.get()
        train_len_factor = self.train_len_factor_ent.get()
        maxtrainlen = self.maxtrainlen_ent.get()

        # initialize the build
        sm = SOMFactory().build(data, mapsize, normalization,
                                initialization, component_names, lattice)
        # start training
        sm.train(n_job, shared_memory, verbose, train_rough_len, train_rough_radiusin, train_rough_radiusfin, train_finetune_len,
                 train_finetune_radiusin, train_finetune_radiusfin, train_len_factor, maxtrainlen)

        # errors calculation
        topographic_error = sm.calculate_topographic_error()
        quantitization_error = np.mean(sm._bmu[1])

        # if multiple runs are required
        #joblib.dump(sm, "model_{}.joblib".format(i))

        # dump the model
        # dir_name = "Models"
        # file_name = "sm_model"

        pickle.dump(sm, open("Models/sm_model", "wb"))

        # print errors on the cmd prompt
        print("the topographic error is %s " % topographic_error)
        print("the quantitization error is %s " % quantitization_error)

    # select model from the chosen file
    # callback 2 --> select trained model
    def select_model(self):
        """
        The file should be the trained sm model in the directory
        This operation 
        """
        file = askopenfilename(initialdir = "/",title = "Select file",filetypes =[("All files", "*.*")]) 
        if file is not None:
            return pickle.load(open(file, "rb"))

    # generate vis and export to dir_name + filename
    def vis(self):
        """
        generate cluster map visualization
        """
        # the followings are default, we can customize later
        title = "Cluster"
        dir_name = "Images/"
        file_name = "cluster.png"

        data = self.read_data()
        sm = self.select_model()

        labels = labels = list(data.index)
        n_clusters = 5

        cmap = plt.get_cmap("tab20")
        n_palette = 20  # number of different colors in this color palette
        color_list = [cmap((i % n_palette)/n_palette)
                      for i in range(n_clusters)]
        msz = sm.codebook.mapsize
        proj = sm.project_data(sm.data_raw)
        coord = sm.bmu_ind_to_xy(proj)

        fig, ax = plt.subplots(1, 1, figsize=(40, 40))

        #cl_labels = som.cluster(n_clusters)
        cl_labels = sklearn.cluster.KMeans(
            n_clusters=n_clusters, random_state=555).fit_predict(sm.codebook.matrix)

        # fill each rectangular unit area with cluster color
        # and draw line segment to the border of cluster
        norm = mpl.colors.Normalize(vmin=0, vmax=n_palette, clip=True)

        # borders
        ax.pcolormesh(cl_labels.reshape(msz[0], msz[1]).T % n_palette,
                      cmap=cmap, norm=norm, edgecolors='face',
                      lw=0.5, alpha=0.5)

        ax.scatter(coord[:, 0]+0.5, coord[:, 1]+0.5, c='k', marker='o')
        ax.axis('off')

        for label, x, y in zip(labels, coord[:, 0], coord[:, 1]):
            x += 0.2
            y += 0.2
            # "+ 0.1" means shift of label location to upperright direction

        # randomize the location of the label not to be overwrapped with each other
        # x_text += 0.1 * np.random.randn()
        y += 0.3 * np.random.randn()

        # wrap of label for chemical compound
        # label = str_wrap(label)

        #     ax.text(x+0.3, y+0.3, label,
        #             horizontalalignment='left', verticalalignment='bottom',
        #             rotation=30, fontsize=15, weight='semibold')

        plt.title(title)

        # save as png file
        plt.savefig(os.path.join(dir_name, file_name)+".png")

    # cluster inspector

    def cluster_inspector(self):
        """
        Input: sm is the som model
        data is the input data matrix
        """
        data = self.read_data()
        sm = self.select_model()

        # This makes all the loggers stay quiet unless it's important
        logging.getLogger().setLevel(logging.WARNING)

        cl_labels = ci.kmeans_clust(sm, 5)
        clusters_list = ci.sort_materials_by_cluster(sm, data, cl_labels)

        # # This makes it so it will display the full lists
        pd.set_option('display.max_rows', 2000)
        pd.set_option('display.width', 1000)
        pd.set_option("display.max_columns", 50)

        # # This should be the last statement of the cell, to make it display
        # # That, or assign the return value to a variable, and have that variable be the final expression in a cell
        ci.cluster_tabs(sm, data, clusters_list, cl_labels)


if __name__ == '__main__':
    vp_start_gui()
