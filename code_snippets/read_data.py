# importing tkinter and tkinter.ttk
# and all their functions and classes
from tkinter import *
from tkinter.ttk import *
import pickle
import pandas as pd
import pprint
import matplotlib.pyplot as plt

#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 23, 2020 07:51:02 PM PST  platform: Windows NT
# Author: Jingtian Zhang

import warnings
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import one_page_all_support
from tkinter import filedialog as tkFileDialog
from tkinter.filedialog import askopenfile
from tkinter.filedialog import askopenfilename
from tkinter import messagebox

# import sompy / tfprop_sompy related packages
import math
import glob
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import urllib
import random
import matplotlib as mpl
from sompy.sompy import SOMFactory
from sompy.visualization.plot_tools import plot_hex_map
import logging
import pickle
import os

import sklearn
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit
from sklearn import cluster
# from sklearn.externals import joblib
import joblib

# cluster inspector
import importlib
import logging
from tfprop_sompy import tfprop_config
from tfprop_sompy import tfprop_vis
from tfprop_sompy import tfprop_config as tfpinit
from tfprop_sompy import cluster_inspector as ci
importlib.reload(ci)

warnings.filterwarnings('ignore')

logging.getLogger('matplotlib.font_manager').disabled = True
# importing askopenfile function
# from class filedialog

root = Tk()
root.geometry('200x100')

# This function will be used to open
# file in read mode and only Python files
# will be opened
# def open_file():
#     file = askopenfilename(initialdir = "/",title = "Select file",filetypes =[("All files", "*.*")])
#     if file is not None:
#         # print(content)
#         content = open(file, "rb")
#         return pickle.load(content)

# ask to open csv file (csv file) with index of the first column


# def open_file():
#     file = askopenfilename(initialdir="/", title="Select Data", filetypes=[("csv files", "*.csv")])
#     if file is not None:
#         content = open(file, "rb")

#         df = pd.read_csv(content).head(400).fillna(0)
#         ind = df[df.columns[0]] # the first columns is zero
#         df = df.set_index(ind)
#         # print(df)
#         # return df

#     sm = SOMFactory().build(df.values, (20,20), 'var', 'pca', None, 'hexa')
#     # start training
#     sm.train(4, False, "info", None, None, None,None, None, None, None, None)

#     # errors calculation
#     topographic_error = sm.calculate_topographic_error()
#     quantitization_error = np.mean(sm._bmu[1])

#     pickle.dump(sm, open("sm_model", "wb"))

#     # print errors on the cmd prompt
#     print("the topographic error is %s " % topographic_error)
#     print("the quantitization error is %s " % quantitization_error)


# btn = Button(root, text='Open', command= lambda: open_file())
# btn.pack(side=TOP, pady=10)

# mainloop()


# data = pd.read_csv("housing.csv").head(400).fillna(0)
# ind = data[data.columns[0]]
# df = data.set_index(ind)

# sm = SOMFactory().build(df.values,
#               mapsize=(20,20),
#               mask=None,
#               mapshape='planar',
#               lattice='rect',
#               normalization='var',
#               initialization='pca',
#               neighborhood='gaussian',
#               training='batch',
#               name='sompy',
#               component_names=None)
    
#     # df.values, (20, 20), 'var', 'pca', None, 'hexa')
# # start training
# sm.train(n_job=1,
#         shared_memory=False,
#         verbose='info',
#         train_rough_len=None,
#         train_rough_radiusin=None,
#         train_rough_radiusfin=None,
#         train_finetune_len=None,
#         train_finetune_radiusin=None,
#         train_finetune_radiusfin=None,
#         train_len_factor=1,
#         maxtrainlen=np.Inf)

# # errors calculation
# topographic_error = sm.calculate_topographic_error()
# quantitization_error = np.mean(sm._bmu[1])

# pickle.dump(sm, open("sm_model", "wb"))

# # print errors on the cmd prompt
# print("the topographic error is %s " % topographic_error)
# print("the quantitization error is %s " % quantitization_error)
